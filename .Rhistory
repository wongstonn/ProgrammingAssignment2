{
## the next section of code creates a string containing the path and filename
## of the input files.  As part of this we loop through the id values we need to turn this
## into a string with the correct number of leading zeroes
id_as_string [i < 10]           <- paste("00",toString(i),sep="")
id_as_string [i > 9 & i < 100]  <- paste("0",toString(i),sep="")
id_as_string [i > 99]           <- toString(i)
path_string                     <- paste("c:/users/Neil/datasciencecoursera/",directory,"/",id_as_string,".csv",sep="")
## now that we have generated the file and pathname, read in the file, determine
## and create separate vectors for sulfate and nitrates for where a reading exists for both
## We keep them in separate vectors as this is format required later on to use the correlation
## function cor()
current_file_values <- read.csv(path_string,header=TRUE)
reading_taken       <- !is.na(current_file_values["sulfate"]) & !is.na(current_file_values["nitrate"])
current_sulfate_readings_vector  <- current_file_values [reading_taken,"sulfate" ]
current_nitrate_readings_vector  <- current_file_values [reading_taken,"nitrate" ]
temp_cor <- cor (current_sulfate_readings_vector,current_nitrate_readings_vector )
if (!is.na(temp_cor)){
corr_answer_vector              <- rbind(corr_answer_vector, cor (current_sulfate_readings_vector,current_nitrate_readings_vector ))
}
} ## end of for loop
return (corr_answer_vector)
}  ## end of complete function definition
directory <- "specdata"
cr <- vector()
cr <- corr(directory,150)
head(cr)
summary(cr)
cr <- corr(directory,400)
head(cr)
summary(cr)
cr <- corr(directory,5000)
summary(cr)
length(cr)
cr <- corr(directory)
summary(cr)
length(cr)
submit()
swirl()
install.packages("swirl")
library(swirl)
rm(list=ls())
swirl()
swirl()
IRIS
library(datasets)
data(iris)
iris
library (datasets)
virginica_df <- subset(iris,Species == "virginica")
virginica_df
##mean(iris[["Sepal.Length"]])
##apply(iris[,1:4],2,mean)
##        library(datasets)
##        data(mtcars)
##
##        mtcars_by_cyl <- split(mtcars, mtcars$cyl)
##        mtcars_by_cyl
##        ##lapply (mtcars_by_cyl, function (x) colMeans(x[1,c("mpg")])    )
##        lapply (mtcars_by_cyl, function (x) mean(x[,"mpg"])    )
library (datasets)
virginica_df <- subset(iris,Species == "virginica")
virginica_df
lapply(virginica_df, function(x) mean(x,[,"Sepal.Length"]))
##mean(iris[["Sepal.Length"]])
##apply(iris[,1:4],2,mean)
##        library(datasets)
##        data(mtcars)
##
##        mtcars_by_cyl <- split(mtcars, mtcars$cyl)
##        mtcars_by_cyl
##        ##lapply (mtcars_by_cyl, function (x) colMeans(x[1,c("mpg")])    )
##        lapply (mtcars_by_cyl, function (x) mean(x[,"mpg"])    )
library (datasets)
virginica_df <- subset(iris,Species == "virginica")
virginica_df
lapply(virginica_df, function(x) mean(x,"Sepal.Length"))
##mean(iris[["Sepal.Length"]])
##apply(iris[,1:4],2,mean)
##        library(datasets)
##        data(mtcars)
##
##        mtcars_by_cyl <- split(mtcars, mtcars$cyl)
##        mtcars_by_cyl
##        ##lapply (mtcars_by_cyl, function (x) colMeans(x[1,c("mpg")])    )
##        lapply (mtcars_by_cyl, function (x) mean(x[,"mpg"])    )
library (datasets)
virginica_df <- subset(iris,Species == "virginica")
virginica_df
colMeans(virginica_df)
##lapply(virginica_df, function(x) mean(x,"Sepal.Length"))
##mean(iris[["Sepal.Length"]])
##apply(iris[,1:4],2,mean)
##        library(datasets)
##        data(mtcars)
##
##        mtcars_by_cyl <- split(mtcars, mtcars$cyl)
##        mtcars_by_cyl
##        ##lapply (mtcars_by_cyl, function (x) colMeans(x[1,c("mpg")])    )
##        lapply (mtcars_by_cyl, function (x) mean(x[,"mpg"])    )
library (datasets)
virginica_df <- subset(iris,Species == "virginica")
virginica_df
colMeans(virginica_df[,"Sepal.Length"])
##lapply(virginica_df, function(x) mean(x,"Sepal.Length"))
##mean(iris[["Sepal.Length"]])
##apply(iris[,1:4],2,mean)
##        library(datasets)
##        data(mtcars)
##
##        mtcars_by_cyl <- split(mtcars, mtcars$cyl)
##        mtcars_by_cyl
##        ##lapply (mtcars_by_cyl, function (x) colMeans(x[1,c("mpg")])    )
##        lapply (mtcars_by_cyl, function (x) mean(x[,"mpg"])    )
library (datasets)
virginica_df <- subset(iris,Species == "virginica")
virginica_df
##colMeans(virginica_df[,"Sepal.Length"])
##lapply(virginica_df, function(x) mean(x,"Sepal.Length"))
mean(iris[["Sepal.Length"]])
##apply(iris[,1:4],2,mean)
##        library(datasets)
##        data(mtcars)
##
##        mtcars_by_cyl <- split(mtcars, mtcars$cyl)
##        mtcars_by_cyl
##        ##lapply (mtcars_by_cyl, function (x) colMeans(x[1,c("mpg")])    )
##        lapply (mtcars_by_cyl, function (x) mean(x[,"mpg"])    )
library (datasets)
virginica_df <- subset(iris,Species == "virginica")
virginica_df
##colMeans(virginica_df[[,"Sepal.Length"]])
##lapply(virginica_df, function(x) mean(x,"Sepal.Length"))
##mean(iris[["Sepal.Length"]])
##apply(iris[,1:4],2,mean)
##        library(datasets)
##        data(mtcars)
##
##        mtcars_by_cyl <- split(mtcars, mtcars$cyl)
##        mtcars_by_cyl
##        ##lapply (mtcars_by_cyl, function (x) colMeans(x[1,c("mpg")])    )
##        lapply (mtcars_by_cyl, function (x) mean(x[,"mpg"])    )
library (datasets)
virginica_df <- subset(iris,Species == "virginica")
virginica_df
colMeans(virginica_df[[,"Sepal.Length"]])
##lapply(virginica_df, function(x) mean(x,"Sepal.Length"))
##mean(iris[["Sepal.Length"]])
##apply(iris[,1:4],2,mean)
##        library(datasets)
##        data(mtcars)
##
##        mtcars_by_cyl <- split(mtcars, mtcars$cyl)
##        mtcars_by_cyl
##        ##lapply (mtcars_by_cyl, function (x) colMeans(x[1,c("mpg")])    )
##        lapply (mtcars_by_cyl, function (x) mean(x[,"mpg"])    )
library (datasets)
virginica_df <- subset(iris,Species == "virginica")
virginica_df
colMeans(virginica_df[,["Sepal.Length"]])
##lapply(virginica_df, function(x) mean(x,"Sepal.Length"))
##mean(iris[["Sepal.Length"]])
##apply(iris[,1:4],2,mean)
##        library(datasets)
##        data(mtcars)
##
##        mtcars_by_cyl <- split(mtcars, mtcars$cyl)
##        mtcars_by_cyl
##        ##lapply (mtcars_by_cyl, function (x) colMeans(x[1,c("mpg")])    )
##        lapply (mtcars_by_cyl, function (x) mean(x[,"mpg"])    )
library (datasets)
virginica_df <- subset(iris,Species == "virginica")
virginica_df
colMeans(virginica_df[["Sepal.Length"]])
iris_split_df <- split(iris, iris$Species)
iris_split_df
##lapply(virginica_df, function(x) mean(x,"Sepal.Length"))
##mean(iris[["Sepal.Length"]])
##apply(iris[,1:4],2,mean)
##        library(datasets)
##        data(mtcars)
##
##        mtcars_by_cyl <- split(mtcars, mtcars$cyl)
##        mtcars_by_cyl
##        ##lapply (mtcars_by_cyl, function (x) colMeans(x[1,c("mpg")])    )
##        lapply (mtcars_by_cyl, function (x) mean(x[,"mpg"])    )
Species
library (datasets)
data(iris)
virginica_df <- subset(iris,Species == "virginica")
virginica_df
colMeans(virginica_df[["Sepal.Length"]])
iris_split_df <- split(iris, iris$Species)
iris_split_df
##lapply(virginica_df, function(x) mean(x,"Sepal.Length"))
##mean(iris[["Sepal.Length"]])
##apply(iris[,1:4],2,mean)
##        library(datasets)
##        data(mtcars)
##
##        mtcars_by_cyl <- split(mtcars, mtcars$cyl)
##        mtcars_by_cyl
##        ##lapply (mtcars_by_cyl, function (x) colMeans(x[1,c("mpg")])    )
##        lapply (mtcars_by_cyl, function (x) mean(x[,"mpg"])    )
library (datasets)
data(iris)
virginica_df <- subset(iris,Species == "virginica")
virginica_df
colMeans(virginica_df[["Sepal.Length"]])
iris_split_df <- split(iris, iris$Species)
iris_split_df
##lapply(virginica_df, function(x) mean(x,"Sepal.Length"))
##mean(iris[["Sepal.Length"]])
##apply(iris[,1:4],2,mean)
##        library(datasets)
##        data(mtcars)
##
##        mtcars_by_cyl <- split(mtcars, mtcars$cyl)
##        mtcars_by_cyl
##        ##lapply (mtcars_by_cyl, function (x) colMeans(x[1,c("mpg")])    )
##        lapply (mtcars_by_cyl, function (x) mean(x[,"mpg"])    )
library (datasets)
data(iris)
virginica_df <- subset(iris,Species == "virginica")
virginica_df
colMeans(virginica_df[["Sepal.Length"]])
iris_split_df <- split(iris, iris$Species)
iris_split_df
lapply (iris_split_df, function(x) mean(x[,"Sepal.Length"]))
##lapply(virginica_df, function(x) mean(x,"Sepal.Length"))
##mean(iris[["Sepal.Length"]])
##apply(iris[,1:4],2,mean)
##        library(datasets)
##        data(mtcars)
##
##        mtcars_by_cyl <- split(mtcars, mtcars$cyl)
##        mtcars_by_cyl
##        ##lapply (mtcars_by_cyl, function (x) colMeans(x[1,c("mpg")])    )
##        lapply (mtcars_by_cyl, function (x) mean(x[,"mpg"])    )
##library (datasets)
##data(iris)
##iris_split_df <- split(iris, iris$Species)
##iris_split_df
##lapply (iris_split_df, function(x) mean(x[,"Sepal.Length"]))
library(datasets)
data(mtcars)
mtcars_by_cyl <- split(mtcars, mtcars$cyl)
mtcars_by_cyl
lapply (mtcars_by_cyl, function (x) mean(x[,"mpg"])    )
##library (datasets)
##data(iris)
##iris_split_df <- split(iris, iris$Species)
##iris_split_df
##lapply (iris_split_df, function(x) mean(x[,"Sepal.Length"]))
library(datasets)
data(mtcars)
mtcars_by_cyl <- split(mtcars, mtcars$cyl)
mtcars_by_cyl
lapply (mtcars_by_cyl, function (x) mean(x[,"hp"])    )
mtcars
##library (datasets)
##data(iris)
##iris_split_df <- split(iris, iris$Species)
##iris_split_df
##lapply (iris_split_df, function(x) mean(x[,"Sepal.Length"]))
library(datasets)
data(mtcars)
mtcars_by_cyl <- split(mtcars, mtcars$cyl)
mtcars_by_cyl
lapply (mtcars_by_cyl, function (x) mean(x[,"hp"])    )
set.seed(1)
rpois(5,2)
?ppois
?rep
x=rep(0:1,each=5)
x
e=rnomr(10,0,20)
e=rnorm(10,0,20)
e
?Rprof
##library (datasets)
##data(iris)
##iris_split_df <- split(iris, iris$Species)
##iris_split_df
##lapply (iris_split_df, function(x) mean(x[,"Sepal.Length"]))
library(datasets)
data(mtcars)
mtcars_by_cyl <- split(mtcars, mtcars$cyl)
mtcars_by_cyl
lapply (mtcars_by_cyl, function (x) mean(x[,"hp"])    )
y = 2
x1=1
x2=1
library(datasets)
Rprof()
fit=lm(y ~ x1 + x2)
Rprof(NULL)
summaryRprof()
outcome <- read.csv("outcome-of-care-measures.csv", colClasses = "character")head(outcome)
?pwd
outcome <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
outcome <- read.csv("outcome-of-care-measures.csv", colClasses = "character")head(outcome)
outcome <- read.csv("outcome-of-care-measures.csv", colClasses = "character")head(outcome)
outcome <- read.csv("outcome-of-care-measures.csv", colClasses = "character")##head(outcome)
print("#1")outcome <- read.csv("outcome-of-care-measures.csv", colClasses = "character")print("#2")##head(outcome)print("#3")
print("#1")outcome <- read.csv("outcome-of-care-measures.csv", colClasses = "character")print("#2")####head(outcome)print("#3")
##print("#1")outcome <- read.csv("outcome-of-care-measures.csv", colClasses = "character")print("#2")####head(outcome)print("#3")
##print("#1")outcome <- read.csv("outcome-of-care-measures.csv", colClasses = "character")print("#2")####head(outcome)print("#3")
outcome <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
head (outcome)
source('C:/Users/Neil/datasciencecoursera/Assignment3.R', echo=TRUE)
####print("#1")outcome <- read.csv("outcome-of-care-measures.csv", colClasses = "character")##print("#2")##head(outcome)print("#3")
source('C:/Users/Neil/datasciencecoursera/Assignment3.R', echo=TRUE)
source('C:/Users/Neil/datasciencecoursera/Assignment3.R', echo=TRUE)
source('C:/Users/Neil/datasciencecoursera/Assignment3.R', echo=TRUE)
ncol(outcome)
source('C:/Users/Neil/datasciencecoursera/Assignment3.R', echo=TRUE)
source('C:/Users/Neil/datasciencecoursera/Assignment3.R', echo=TRUE)
source('C:/Users/Neil/datasciencecoursera/Assignment3.R', echo=TRUE)
source('C:/Users/Neil/datasciencecoursera/Assignment3.R', echo=TRUE)
source('C:/Users/Neil/datasciencecoursera/Assignment3.R', echo=TRUE)
best <- function (state_str, outcome_str){        outcome_df                 <- read.csv("outcome-of-care-measures.csv", colClasses = "character")        split_outcome_by_state_df  <- split(outcome_str,outcome_str$State)        split_outcome_by_state_df        } ## end of function bestbest(" "," ")
source('C:/Users/Neil/datasciencecoursera/Assignment3.R', echo=TRUE)
source('C:/Users/Neil/datasciencecoursera/Assignment3.R', echo=TRUE)
head(outcome)outcome [,11] <- as.numeric(outcome[,11])class(outcome)colnames(outcome)hist(outcome[,11])best <- function (state_str, outcome_str){        outcome_df                 <- read.csv("outcome-of-care-measures.csv", colClasses = "character")        split_outcome_by_state_df  <- split(outcome_str,outcome_str$State)        split_outcome_by_state_df        } ## end of function bestbest(" "," ")
source('C:/Users/Neil/datasciencecoursera/Assignment3.R', echo=TRUE)
head(outcome)outcome [,11] <- as.numeric(outcome[,11])class(outcome)colnames(outcome)hist(outcome[,11])best <- function (state_str, outcome_str){        outcome_df                 <- read.csv("outcome-of-care-measures.csv", colClasses = "character")        split_outcome_by_state_df  <- split(outcome_df,outcome_df$State)        split_outcome_by_state_df        } ## end of function bestbest(" "," ")
head(outcome)outcome [,11] <- as.numeric(outcome[,11])class(outcome)colnames(outcome)hist(outcome[,11])best <- function (state_str, outcome_str){        outcome_df                 <- read.csv("outcome-of-care-measures.csv", colClasses = "character")        split_outcome_by_state_df  <- split(outcome_df,"State")        split_outcome_by_state_df        } ## end of function bestbest(" "," ")
source('C:/Users/Neil/datasciencecoursera/Assignment3.R', echo=TRUE)
source('C:/Users/Neil/datasciencecoursera/Assignment3.R', echo=TRUE)
source('C:/Users/Neil/datasciencecoursera/Assignment3.R', echo=TRUE)
source('C:/Users/Neil/datasciencecoursera/Assignment3.R', echo=TRUE)
source('C:/Users/Neil/datasciencecoursera/Assignment3.R', echo=TRUE)
source('C:/Users/Neil/datasciencecoursera/Assignment3.R', echo=TRUE)
source('C:/Users/Neil/datasciencecoursera/Assignment3.R', echo=TRUE)
##head(outcome)##outcome [,11] <- as.numeric(outcome[,11])##class(outcome)##colnames(outcome)##hist(outcome[,11])best <- function (state_str_v, outcome_str_v){        outcome_df                 <- read.csv("outcome-of-care-measures.csv", colClasses = "character")        split_outcome_by_state_df  <- split(outcome_df,"State")                ## outcomes can be "heart attack", "heart failure" or "pneumonia"        #check state and outcome are valid        print("#1")        ##colnames(split_outcome_by_state_df)        outcome_df        colnames(outcome_df)        print("#2")        row.names(outcome_df)                                                ##       return (best_hospital_name_str_v)        } ## end of function bestbest(" "," ")
source('C:/Users/Neil/datasciencecoursera/Assignment3.R', echo=TRUE)
source('C:/Users/Neil/datasciencecoursera/Assignment3.R', echo=TRUE)
source('C:/Users/Neil/datasciencecoursera/Assignment3.R', echo=TRUE)
source('C:/Users/Neil/datasciencecoursera/Assignment3.R', echo=TRUE)
source('C:/Users/Neil/datasciencecoursera/Assignment3.R', echo=TRUE)
source('C:/Users/Neil/datasciencecoursera/Assignment3.R', echo=TRUE)
source('C:/Users/Neil/datasciencecoursera/Assignment3.R', echo=TRUE)
source('C:/Users/Neil/datasciencecoursera/Assignment3.R', echo=TRUE)
##head(outcome)##outcome [,11] <- as.numeric(outcome[,11])##class(outcome)##colnames(outcome)##hist(outcome[,11])best <- function (state_str_v, outcome_str_v){        outcome_df                 <- read.csv("outcome-of-care-measures.csv", colClasses = "character")        split_outcome_by_state_df  <- split(outcome_df,outcome_df[,"State"])        split_outcome_by_state_df$1        ##lapply(split_outcome_by_state_df, function(x) colnames(split_outcome_by_state_df))                ## outcomes can be "heart attack", "heart failure" or "pneumonia"        #check state and outcome are valid        print("#1")        ##split_outcome_by_state_df                                                ##       return (best_hospital_name_str_v)        } ## end of function bestbest(" "," ")
source('C:/Users/Neil/datasciencecoursera/Assignment3.R', echo=TRUE)
source('C:/Users/Neil/datasciencecoursera/Assignment3.R', echo=TRUE)
source('C:/Users/Neil/datasciencecoursera/Assignment3.R', echo=TRUE)
source('C:/Users/Neil/datasciencecoursera/Assignment3.R', echo=TRUE)
source('C:/Users/Neil/datasciencecoursera/Assignment3.R', echo=TRUE)
source('C:/Users/Neil/datasciencecoursera/Assignment3.R', echo=TRUE)
?colMeans
source('C:/Users/Neil/datasciencecoursera/Assignment3.R', echo=TRUE)
source('C:/Users/Neil/datasciencecoursera/Assignment3.R', echo=TRUE)
source('C:/Users/Neil/datasciencecoursera/Assignment3.R', echo=TRUE)
?mean
source('C:/Users/Neil/datasciencecoursera/Assignment3.R', echo=TRUE)
source('C:/Users/Neil/datasciencecoursera/Assignment3.R', echo=TRUE)
source('C:/Users/Neil/datasciencecoursera/Assignment3.R', echo=TRUE)
source('C:/Users/Neil/datasciencecoursera/Assignment3.R', echo=TRUE)
source('C:/Users/Neil/datasciencecoursera/Assignment3.R', echo=TRUE)
source('C:/Users/Neil/datasciencecoursera/Assignment3.R', echo=TRUE)
source('C:/Users/Neil/datasciencecoursera/Assignment3.R', echo=TRUE)
source('C:/Users/Neil/datasciencecoursera/Assignment3.R', echo=TRUE)
source('C:/Users/Neil/datasciencecoursera/Assignment3.R', echo=TRUE)
source('C:/Users/Neil/datasciencecoursera/Assignment3.R', echo=TRUE)
source('C:/Users/Neil/datasciencecoursera/Assignment3.R', echo=TRUE)
source('C:/Users/Neil/datasciencecoursera/Assignment3.R', echo=TRUE)
source('C:/Users/Neil/datasciencecoursera/Assignment3.R', echo=TRUE)
source('C:/Users/Neil/datasciencecoursera/Assignment3.R', echo=TRUE)
source('C:/Users/Neil/datasciencecoursera/Assignment3.R', echo=TRUE)
source('C:/Users/Neil/datasciencecoursera/Assignment3.R', echo=TRUE)
source('C:/Users/Neil/datasciencecoursera/Assignment3.R', echo=TRUE)
source('C:/Users/Neil/datasciencecoursera/Assignment3.R', echo=TRUE)
source('C:/Users/Neil/datasciencecoursera/Assignment3.R', echo=TRUE)
source('C:/Users/Neil/datasciencecoursera/Assignment3.R', echo=TRUE)
source('C:/Users/Neil/datasciencecoursera/Assignment3.R', echo=TRUE)
source('C:/Users/Neil/datasciencecoursera/Assignment3.R', echo=TRUE)
source('C:/Users/Neil/datasciencecoursera/Assignment3.R', echo=TRUE)
source('C:/Users/Neil/datasciencecoursera/Assignment3.R', echo=TRUE)
source('C:/Users/Neil/datasciencecoursera/Assignment3.R', echo=TRUE)
source('C:/Users/Neil/datasciencecoursera/Assignment3.R', echo=TRUE)
source('C:/Users/Neil/datasciencecoursera/Assignment3.R', echo=TRUE)
source('C:/Users/Neil/datasciencecoursera/Assignment3.R', echo=TRUE)
source('C:/Users/Neil/datasciencecoursera/Assignment3.R', echo=TRUE)
source('C:/Users/Neil/datasciencecoursera/Assignment3.R', echo=TRUE)
source('C:/Users/Neil/datasciencecoursera/Assignment3.R', echo=TRUE)
source('C:/Users/Neil/datasciencecoursera/Assignment3.R', echo=TRUE)
source('C:/Users/Neil/datasciencecoursera/Assignment3.R', echo=TRUE)
?grep
?match
source('C:/Users/Neil/datasciencecoursera/Assignment3.R', echo=TRUE)
source('C:/Users/Neil/datasciencecoursera/Assignment3.R', echo=TRUE)
source('C:/Users/Neil/datasciencecoursera/Assignment3.R', echo=TRUE)
source('C:/Users/Neil/datasciencecoursera/Assignment3.R', echo=TRUE)
source('C:/Users/Neil/datasciencecoursera/Assignment3.R', echo=TRUE)
source('C:/Users/Neil/datasciencecoursera/Assignment3.R', echo=TRUE)
source('C:/Users/Neil/datasciencecoursera/Assignment3.R', echo=TRUE)
source('C:/Users/Neil/datasciencecoursera/Assignment3.R', echo=TRUE)
source('C:/Users/Neil/datasciencecoursera/Assignment3.R', echo=TRUE)
source('C:/Users/Neil/datasciencecoursera/Assignment3.R', echo=TRUE)
source('C:/Users/Neil/datasciencecoursera/Assignment3.R', echo=TRUE)
source('C:/Users/Neil/datasciencecoursera/Assignment3.R', echo=TRUE)
source('C:/Users/Neil/datasciencecoursera/Assignment3.R', echo=TRUE)
source('C:/Users/Neil/datasciencecoursera/Assignment3.R', echo=TRUE)
source('C:/Users/Neil/datasciencecoursera/Assignment3.R', echo=TRUE)
source('C:/Users/Neil/datasciencecoursera/Assignment3.R', echo=TRUE)
source('C:/Users/Neil/datasciencecoursera/Assignment3.R', echo=TRUE)
source('C:/Users/Neil/datasciencecoursera/Assignment3.R', echo=TRUE)
source('C:/Users/Neil/datasciencecoursera/Assignment3.R', echo=TRUE)
source('C:/Users/Neil/datasciencecoursera/Assignment3.R', echo=TRUE)
source('C:/Users/Neil/datasciencecoursera/Assignment3.R', echo=TRUE)
source('C:/Users/Neil/datasciencecoursera/Assignment3.R', echo=TRUE)
source('C:/Users/Neil/datasciencecoursera/Assignment3.R', echo=TRUE)
source('C:/Users/Neil/datasciencecoursera/Assignment3.R', echo=TRUE)
?subset
source('C:/Users/Neil/datasciencecoursera/Assignment3.R', echo=TRUE)
source('C:/Users/Neil/datasciencecoursera/Assignment3.R', echo=TRUE)
source('C:/Users/Neil/datasciencecoursera/Assignment3.R', echo=TRUE)
source('C:/Users/Neil/datasciencecoursera/Assignment3.R', echo=TRUE)
?stop
source('C:/Users/Neil/datasciencecoursera/Assignment3.R', echo=TRUE)
source('C:/Users/Neil/datasciencecoursera/Assignment3.R', echo=TRUE)
source('C:/Users/Neil/datasciencecoursera/Assignment3.R', echo=TRUE)
##head(outcome)##outcome [,11] <- as.numeric(outcome[,11])##class(outcome)##colnames(outcome)##hist(outcome[,11])best <- function (state_str_v, outcome_str_v){        hospconnames <- c("Lower.Mortality.Estimate...Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia"                         ,"Lower.Mortality.Estimate...Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack"                         ,"Lower.Mortality.Estimate...Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure")        conditions   <- c("pneumonia","heart attack","heart failure")        condition_lookup_df <- data.frame(conditions, hospconnames)        outcome_df                 <- read.csv("outcome-of-care-measures.csv", colClasses = "character")                ##################### validate inputs ########################                        look_up_result <- match(outcome_str_v,condition_lookup_df[,"conditions"],nomatch=-1)        if (look_up_result == -1){                stop ("invalid outcome")        }         else        {                col_2B_looked_up = condition_lookup_df[look_up_result,"hospconnames"]                ## print(paste("col_2B_looked_up is:",col_2B_looked_up,"based upon input of:", outcome_str_v))        }                if (match(state_str_v,outcome_df[,"State"],nomatch=-1) == -1){                stop ("invalid state")        }         ## print(paste("state lookup=",toString(match(state_str_v,outcome_df[,"State"],nomatch=-1))))                  ##################### create data frame for state requested in functional call ############################        split_outcome_by_state_df  <- split(outcome_df,outcome_df[,"State"])        state_df = split_outcome_by_state_df[state_str_v]                ##################### compact the data frame to exclude hospitals with no values for the condition ########                state_df <- subset(state_df,!is.na(state_df[,look_up_result])                                print (state_df[,outcome_str_v])        ##print ("#2")        ##print (state_str_v)                ## outcomes can be "heart attack", "heart failure" or "pneumonia"                        ##answer = lapply(split_outcome_by_state_df, function(x){ stateMean(x)}  )        ##answer                #check state and outcome are valid                ##split_outcome_by_state_df                                                ##       return (best_hospital_name_str_v)        } ## end of function beststateMean <- function (input_state_df){        ##print( colnames (input_state_df))        y = nrow(input_state_df)        ##y = mean(input_state_df[,"Upper.Mortality.Estimate...Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack"],na.rm=TRUE)        print(y)        return(y)}best("AK","pneumonia")
##head(outcome)##outcome [,11] <- as.numeric(outcome[,11])##class(outcome)##colnames(outcome)##hist(outcome[,11])best <- function (state_str_v, outcome_str_v){        hospconnames <- c("Lower.Mortality.Estimate...Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia"                         ,"Lower.Mortality.Estimate...Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack"                         ,"Lower.Mortality.Estimate...Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure")        conditions   <- c("pneumonia","heart attack","heart failure")        condition_lookup_df <- data.frame(conditions, hospconnames)        outcome_df                 <- read.csv("outcome-of-care-measures.csv", colClasses = "character")                ##################### validate inputs ########################                        look_up_result <- match(outcome_str_v,condition_lookup_df[,"conditions"],nomatch=-1)        if (look_up_result == -1){                stop ("invalid outcome")        }         else        {                col_2B_looked_up = condition_lookup_df[look_up_result,"hospconnames"]                ## print(paste("col_2B_looked_up is:",col_2B_looked_up,"based upon input of:", outcome_str_v))        }                if (match(state_str_v,outcome_df[,"State"],nomatch=-1) == -1){                stop ("invalid state")        }         ## print(paste("state lookup=",toString(match(state_str_v,outcome_df[,"State"],nomatch=-1))))                  ##################### create data frame for state requested in functional call ############################        split_outcome_by_state_df  <- split(outcome_df,outcome_df[,"State"])        state_df = split_outcome_by_state_df[state_str_v]                ##################### compact the data frame to exclude hospitals with no values for the condition ########                state_df <- subset(state_df,!is.na(state_df[,look_up_result])                                print (state_df[,outcome_str_v])        ##print ("#2")        ##print (state_str_v)                ## outcomes can be "heart attack", "heart failure" or "pneumonia"                        ##answer = lapply(split_outcome_by_state_df, function(x){ stateMean(x)}  )        ##answer                #check state and outcome are valid                ##split_outcome_by_state_df                                                ##       return (best_hospital_name_str_v)        } ## end of function beststateMean <- function (input_state_df){        ##print( colnames (input_state_df))        y = nrow(input_state_df)        ##y = mean(input_state_df[,"Upper.Mortality.Estimate...Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack"],na.rm=TRUE)        print(y)        return(y)}best("AK","pneumonia")
source('C:/Users/Neil/datasciencecoursera/Assignment3.R', echo=TRUE)
source('C:/Users/Neil/datasciencecoursera/Assignment3.R', echo=TRUE)
source('C:/Users/Neil/datasciencecoursera/Assignment3.R', echo=TRUE)
source('C:/Users/Neil/datasciencecoursera/Assignment3.R', echo=TRUE)
source('C:/Users/Neil/datasciencecoursera/Assignment3.R', echo=TRUE)
source('C:/Users/Neil/datasciencecoursera/Assignment3.R', echo=TRUE)
source('C:/Users/Neil/datasciencecoursera/Assignment3.R', echo=TRUE)
source('C:/Users/Neil/datasciencecoursera/Assignment3.R', echo=TRUE)
source('C:/Users/Neil/datasciencecoursera/Assignment3.R', echo=TRUE)
source('C:/Users/Neil/datasciencecoursera/Assignment3.R', echo=TRUE)
?grep
source('C:/Users/Neil/datasciencecoursera/Assignment3.R', echo=TRUE)
source('C:/Users/Neil/datasciencecoursera/Assignment3.R', echo=TRUE)
source('C:/Users/Neil/datasciencecoursera/Assignment3.R', echo=TRUE)
source('C:/Users/Neil/datasciencecoursera/Assignment3.R', echo=TRUE)
source('C:/Users/Neil/datasciencecoursera/Assignment3.R', echo=TRUE)
source('C:/Users/Neil/datasciencecoursera/Assignment3.R', echo=TRUE)
source('C:/Users/Neil/datasciencecoursera/Assignment3.R', echo=TRUE)
source('C:/Users/Neil/datasciencecoursera/Assignment3.R', echo=TRUE)
source('C:/Users/Neil/datasciencecoursera/Assignment3.R', echo=TRUE)
?dim
source('C:/Users/Neil/datasciencecoursera/Assignment3.R', echo=TRUE)
source('C:/Users/Neil/datasciencecoursera/Assignment3.R', echo=TRUE)
source('C:/Users/Neil/datasciencecoursera/Assignment3.R', echo=TRUE)
source('C:/Users/Neil/datasciencecoursera/Assignment3.R', echo=TRUE)
source('C:/Users/Neil/datasciencecoursera/Assignment3.R', echo=TRUE)
source('C:/Users/Neil/datasciencecoursera/Assignment3.R', echo=TRUE)
source('C:/Users/Neil/datasciencecoursera/Assignment3.R', echo=TRUE)
source('C:/Users/Neil/datasciencecoursera/Assignment3.R', echo=TRUE)
source('C:/Users/Neil/datasciencecoursera/Assignment3.R', echo=TRUE)
source('C:/Users/Neil/datasciencecoursera/Assignment3.R', echo=TRUE)
source('C:/Users/Neil/datasciencecoursera/Assignment3.R', echo=TRUE)
source('C:/Users/Neil/datasciencecoursera/Assignment3.R', echo=TRUE)
source('C:/Users/Neil/datasciencecoursera/Assignment3.R', echo=TRUE)
source('C:/Users/Neil/datasciencecoursera/Assignment3.R', echo=TRUE)
source('C:/Users/Neil/datasciencecoursera/Assignment3.R', echo=TRUE)
source('C:/Users/Neil/datasciencecoursera/Assignment3.R', echo=TRUE)
source('C:/Users/Neil/datasciencecoursera/Assignment3.R', echo=TRUE)
source('C:/Users/Neil/datasciencecoursera/Assignment3.R', echo=TRUE)
source('C:/Users/Neil/datasciencecoursera/Assignment3.R', echo=TRUE)
source('C:/Users/Neil/datasciencecoursera/Assignment3.R', echo=TRUE)
source('C:/Users/Neil/datasciencecoursera/Assignment3.R', echo=TRUE)
source('C:/Users/Neil/datasciencecoursera/Assignment3.R', echo=TRUE)
source('C:/Users/Neil/datasciencecoursera/Assignment3.R', echo=TRUE)
source('C:/Users/Neil/datasciencecoursera/Assignment3.R', echo=TRUE)
source('C:/Users/Neil/datasciencecoursera/Assignment3.R', echo=TRUE)
source('C:/Users/Neil/datasciencecoursera/Assignment3.R', echo=TRUE)
source('C:/Users/Neil/datasciencecoursera/Assignment3.R', echo=TRUE)
source('C:/Users/Neil/datasciencecoursera/Assignment3.R', echo=TRUE)
source('C:/Users/Neil/datasciencecoursera/Assignment3.R', echo=TRUE)
source('C:/Users/Neil/datasciencecoursera/Assignment3.R', echo=TRUE)
source('C:/Users/Neil/datasciencecoursera/Assignment3.R', echo=TRUE)
source('C:/Users/Neil/datasciencecoursera/Assignment3.R', echo=TRUE)
source('C:/Users/Neil/datasciencecoursera/Assignment3.R', echo=TRUE)
?cbind
source('C:/Users/Neil/datasciencecoursera/Assignment3.R', echo=TRUE)
source('C:/Users/Neil/datasciencecoursera/Assignment3.R', echo=TRUE)
source('C:/Users/Neil/datasciencecoursera/Assignment3.R', echo=TRUE)
source('C:/Users/Neil/datasciencecoursera/Assignment3.R', echo=TRUE)
source('C:/Users/Neil/datasciencecoursera/Assignment3.R', echo=TRUE)
source('C:/Users/Neil/datasciencecoursera/Assignment3.R', echo=TRUE)
source('C:/Users/Neil/datasciencecoursera/Assignment3.R', echo=TRUE)
source('C:/Users/Neil/datasciencecoursera/Assignment3.R', echo=TRUE)
?max
source('C:/Users/Neil/datasciencecoursera/Assignment3.R', echo=TRUE)
source('C:/Users/Neil/datasciencecoursera/Assignment3.R', echo=TRUE)
source('C:/Users/Neil/datasciencecoursera/Assignment3.R', echo=TRUE)
source('C:/Users/Neil/datasciencecoursera/Assignment3.R', echo=TRUE)
source('C:/Users/Neil/datasciencecoursera/Assignment3.R', echo=TRUE)
source('C:/Users/Neil/datasciencecoursera/Assignment3.R', echo=TRUE)
source('C:/Users/Neil/datasciencecoursera/Assignment3.R', echo=TRUE)
source('C:/Users/Neil/datasciencecoursera/Assignment3.R', echo=TRUE)
source('C:/Users/Neil/datasciencecoursera/Assignment3.R', echo=TRUE)
source('C:/Users/Neil/datasciencecoursera/Assignment3.R', echo=TRUE)
source('C:/Users/Neil/datasciencecoursera/Assignment3.R', echo=TRUE)
source('C:/Users/Neil/datasciencecoursera/Assignment3.R', echo=TRUE)
source('C:/Users/Neil/datasciencecoursera/Assignment3.R', echo=TRUE)
source('C:/Users/Neil/datasciencecoursera/best.R', echo=TRUE)
source('C:/Users/Neil/datasciencecoursera/best.R', echo=TRUE)
best("TX","heart attack")best("TX","heart failure")best("MD","heart attack")best("MD","pneumonia")best("BB","heart attack")
source("http://d396qusza40orc.cloudfront.net/rprog%2Fscripts%2Fsubmitscript3.R")
submit()
2
submit()
submit()
submit()
